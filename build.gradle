buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jlleitschuh.gradle:ktlint-gradle:11.5.0"
    }
}

plugins {
    id 'com.android.application' version '8.0.2' apply false
    id 'com.android.library' version '8.0.2' apply false
    id 'org.jetbrains.kotlin.android' version '1.7.20' apply false
    id 'com.google.gms.google-services' version '4.3.15' apply false
    id 'jacoco' apply true
    id 'org.jlleitschuh.gradle.ktlint' version '11.5.0' apply true
    id "org.sonarqube" version "4.3.0.3225" apply true
}

allprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses true
    jacoco.excludes = ['jdk.internal.*']
}

task installGitHook(type: Copy) {
    def lintingConfigScript = new File(rootProject.rootDir, '.git/hooks/pre-commit')
    if (!lintingConfigScript.exists()) {
        from new File(rootProject.rootDir, '.githooks/pre-commit')
        into { new File(rootProject.rootDir, '.git/hooks') }
        fileMode 0777
    }
}

tasks.getByPath('app:preBuild').dependsOn installGitHook

sonar {
    properties {
        property "sonar.projectKey", "ronaldocoding_sommelier"
        property "sonar.organization", "ronaldocoding"
        property "sonar.variant", "debug"
        property "sonar.token", "91692d1f843ebfa19dad3778009c41985e8ade26"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "build/intermediates/classes/debug"
        property "sonar.java.binaries", "build/intermediates/classes/debug"
        property "sonar.java.test.binaries", "build/intermediates/classes/debug"
        property "sonar.tests", ["src/test/java", "src/test/kotlin"]
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.rootDir}/app/build/reports/coverage/test/debug/report.xml"
        property "sonar.test.inclusions", "**/*Test*/**"
        property "sonar.coverage.exclusions", "**/br/com/sommelier/shared/screen/**/*, **/br/com/sommelier/presentation/**/*/screen/**/*, **/br/com/sommelier/ui/**/*, **/br/com/sommelier/util/**/*"
        property "sonar.sourceEncoding", "UTF-8"
    }
}